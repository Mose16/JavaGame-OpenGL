#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;

out vec4 out_Colour; //Output colour of pixel

uniform sampler2D textureSampler; //IDK. Basically represents texture
uniform vec3 lightColour;

void main(void) {
	
	
	//DOT product: 
	vec3 unitNormal = normalize(surfaceNormal); //Normalize makes sure size of it is 1 so that we know it wont affect the dot product. Normalize = Size = 1, direction = the same
	vec3 unitLightVector = normalize(toLightVector);
	
	float nDotl = dot(unitNormal, unitLightVector); //Do dot math
	float brightness = max(nDotl, 0.0); //If nDotl is less than 0, make it = 0 otherwise keep the same
	vec3 diffuse = brightness * lightColour; //Final light value * colour = final colour value
	
	out_Colour = vec4(diffuse, 1.0) * texture(textureSampler, pass_textureCoords); //Returns colour of pixel on texture at those coords

}